module Main where

data FailedGuess = GuessOutcome_TooLow | GuessOutcome_TooHigh

template Secret
  with
    gameMaster : Party
    secretNumber : Int
  where
    signatory gameMaster
    nonconsuming choice Divulge : Int
      controller gameMaster
      do
        pure secretNumber

template GuessingGame
  with
    gameMaster : Party
    public : Party
    secretId : ContractId Secret
  where
    signatory gameMaster
    observer public
    nonconsuming choice InvitePlayer : ContractId GameInvitation
      with invitedPlayer : Party
      controller gameMaster
      do
        create GameInvitation with
          gameMaster
          invitedPlayer
          invitedGameInstance = self
    nonconsuming choice AcceptGuessSubmission : Either FailedGuess Party
      with
        guessingNumber : Int
      controller gameMaster
      do
        secret <- exercise secretId Divulge
        case compare guessingNumber secret of
          LT -> pure (Left GuessOutcome_TooLow)
          GT -> pure (Left GuessOutcome_TooHigh)
          EQ -> do
            archive self
            pure (Right public)

template GuessingGameResult
  with
    gameMaster : Party
    public : Party
    winner : Party
    number : Int
  where
    signatory gameMaster, winner

template GamePlayerGuess
  with
    gameMaster : Party
    thisPlayer : Party
    thisGameInstance : ContractId GuessingGame
    thisGuess : Int
  where
    signatory gameMaster, thisPlayer
    nonconsuming choice ProcessGuess : Either FailedGuess (ContractId GuessingGameResult)
      controller gameMaster
      do
        result <- exercise thisGameInstance AcceptGuessSubmission with
          guessingNumber = thisGuess
        case result of
          Left failure -> pure (Left failure)
          Right public -> Right <$> create GuessingGameResult with
            gameMaster
            public
            winner = thisPlayer
            number = thisGuess

template GameInvitation
  with
    gameMaster : Party
    invitedPlayer : Party
    invitedGameInstance : ContractId GuessingGame
  where
    signatory gameMaster
    observer invitedPlayer
    choice MakeGuess : ContractId GamePlayerGuess
      with
        myGuess : Int
      controller invitedPlayer
      do
        create GamePlayerGuess with
          gameMaster
          thisPlayer = invitedPlayer
          thisGameInstance = invitedGameInstance
          thisGuess = myGuess
    choice RejectInvitation : ()
      controller invitedPlayer
      do
        pure ()